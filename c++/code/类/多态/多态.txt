多态分为两类
	1.静态多态
	函数名重载和运算符重载就属于静态多态，复用函数名
	2.动态多态
	派生类和虚函数实现运行时多态
二者之间区别
	静态多态函数地址早绑定，编译时绑定
	动态多态函数地址晚绑定，运行时绑定
动态多态的使用
	父类指针或引用指向子类对象 

virtual 关键字修饰的函数称为虚函数
类中会保存一个vfptr指针指向vftable（虚函数表）这里存储着虚函数地址 例如&father::foo()
子类会继承vfptr指针 但是重写虚函数会导致vftable中的虚函数地址被替换 &father::foo()->&son::foo()

有时基类不需要具体实现，只需要做个框架让派生类实现，这时需要用到纯虚函数
virtual 返回值类型 函数名(参数列表...) = 0;
含有纯虚函数的类称为抽象类，抽象类无法实例化，子类必须重写纯虚函数，否则也属于抽象类。

父类指针delete时，不会调用子类的析构函数，需要在父类析构函数上加上virtual 才能正确调用
virtual ~father(){...}
纯虚析构 virtual ~father()=0 需要在外部实现 father::~father(){...}
 