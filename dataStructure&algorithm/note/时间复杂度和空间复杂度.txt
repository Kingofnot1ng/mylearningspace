一、算法效率的度量方法
	1.事后度量法
		通过设置计时器之类的东西测量算法运行所需的时间
	2.事前分析
		a.算法采用的策略、方案
		b.编译产生的代码质量
		c.问题的输入规模
		d.机器执行指令的速度
二、函数的渐近增长
	关注算法复杂度时，主要关心最高项阶数
	例如O(2n+1)=O(3n+3)=O(n),
	      O(n^2+1)=O(2*n^2)=O(n^2)
三、算法时间复杂度的定义
	在计算机科学中，时间复杂性，又称时间复杂度，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。
	一般情况下，随着输入规模n的增大，T(n)增长最慢的算法为最优算法。
四、常见的时间复杂度
	O(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)
	O(n^3)及后面的时间复杂度过大，没必要讨论
五、空间复杂度
	空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。	