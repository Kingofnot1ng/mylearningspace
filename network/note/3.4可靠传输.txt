一、可靠传输
    1.可靠传输的概念：
        i.使用差错检测技术，接受方可检测数据分组是否在传输过程中出现误码/比特错误等（还有分组丢失，分组失序，分组重复）
        ii.检测出差错后，将错误帧丢弃，并试图重新获取正确的帧
    2.数据链路层的可靠传输：
        i.对于有线链路，由于其可靠性较高，为了减小开销，并不要求数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题
        交由上层处理
        ii.对于无线链路，其易受到干扰，误码率高，要求数据链路层向上提供可靠传输服务
    3.可靠传输实现较为复杂，需要根据应用需求选择是否实现可靠传输

二、停止-等待协议SW
    1.协议步骤
        i.发送方发送数据分组data，在发送完毕后进入等待状态
        ii.如果接受方收到分组并检测成功后，向发送方再发送一个ACK分组示意收到；如果检测失败，向发送方发送NAK分组示意需要重传data
        iii.发送方基于接收方的回应进行下一步：如果收到ACK，则发送下一个分组；如果收到NAK，则重新发送data分组
    2.各种情况
        i.发送方的data丢失（没有到达接收方）
            超时重传。可在发送方在发送分组后设置一个计时器。如果超过计时器规定的时间，发送方仍然收不到ACK或NAK，则重传原来的分组。
            一般可将重传时间设置为略大与从发送方到接受方的平均往返时间。
        ii.接收方的ACK或NAK丢失，这种情况可能导致重复分组
            由于停止等待协议具有 确保当前分组被接受到才会发送下一个分组 的特性，只需要在分组中设置一个比特的标志位。发送方每发送一
        个分组时候，会把当前分组的标志位赋值为上一个分组的标志位的反，保证两个分组的标志位必然不同。当接受方收到分组时，将会把此分组
        的标志与上一个收到的分组做对比。如果相同，说明收到了重复分组，将抛弃当前分组，并回复ACK；如果不同，说明正常收到分组，将接受
        当前分组，并回复ACK
        iii.接收方发送的ACK超时到达，可能导致发送方发送多余的data分组，进而收到多余的ACK。这时发送方如果正在发送下一个分组data1，会
        导致发送方误认为data1被收到，导致传输错误（在数据链路层，往返时间较为固定，一般不会出现ACK延时到达的现象）
            对分组也做标记。对于data分组，接收方发送ACK0。这样发送方收到ACK0后，就知道这是接收方对于data分组的回应，会将其忽略，而不
        是将其误认为data1的回应ACK1。
    3.信道利用率
        设发送方发送data分组所耗费的发送时延为TD，双方之间的往返时间RTT，接收方发送ACK所耗费的时延为TA。忽略发送方对ACK分组的处理时延
        和接收方对于data分组的处理时延。信道利用率U=TD/TD+RTT+TA。
        由此可见，当TD<<RTT(发送时延远小于往返时间，常见于卫星通信)时，信道利用率非常低
    
三、回退n帧协议
    为了解决停止等待协议信道利用率低的问题，可使发送方同时发送多个帧，即流水线传输。数据帧需要n位bit作为编号位。发送方规定一个发送窗口，
    只有编号处于发送窗口之内的分组才允许发送，发送窗口的大小为WT，1<WT<=2^N-1。接受方的接受窗口大小WR=1。接受方的接受窗口大小WR。
    1.协议步骤
        i.发送方发送数据分组data0,data1...data(WT-1),在发送完毕后进入等待状态
        ii.接收方接受data0，验证成功后向发送方发送ACK0，接收方窗口后移1位。随后逐次接受分组data1，data2...data(WT-1),并向接受方
        返回ACK1,ACK2...ACK(WT-1)。
        iii.发送方方只需要接受到ACK(WT-1)后便可以知道，发送窗口中位置在WT-1之前（包括WT-1）的分组已经被全部接受，发送窗口后移到WT位，
        删除之前的数据缓存，准备发送下面的分组
    2.各种情况
        i.某个ACKN丢失
            接收方可能不一定会对每个分组都回复ACK,可能是在接受几个分组后才会回复ACK（由具体实现决定）。发送方方只需要接受到ACKM（M>N）后便可
        以知道，发送窗口中位置在M之前（包括N）的分组已经被全部接受,因此ACKN丢失不受影响。这就是累计确认
        ii.接受方收到的分组不在的接受窗口内
            假设接受窗口在position N,发送窗口在position N-M(M>N)。发送方发送分组dataN...dataK(N<=K<=M)...dataM。假设dataK没有被接受到，或者dataK因为
        被检错而抛弃,剩下的data(K+1)...dataM因为不在接受窗口内被接受方抛弃。每丢弃一个分组，就发送一个ACK(K-1)。接收方收到若干ACK(K-1)
        明白data(K-1)后有相应个分组需要重传，立刻重传。因为dataK丢失，导致data(K+1)...dataM也需要重传，这就叫做回退n帧。
        iii.发送方窗口宽度WT>2^n-1
            因为各种原因导致发送方重复发送接受窗口内的分组，而接受方收到重复分组时，如果发送方的窗口过大，可能会导致某分组正好落在接受窗口上，
        从而发生分组重复。设置小的发送窗口可以避免这个问题
    3.小结
        i.当发送窗口大小WT=1时，即为停止等待协议。
        ii.接受方只能逐个接受，遇到错误分组会使发送方重传多个分组，即回退n帧。
        iii.由ii可见，当信道质量较差导致频繁重传时，回退n帧协议需要较多的重传分组，导致效率不高。而信道质量较好时，回退n帧协议效率高于停止等待协议

四、选择重传协议
        在回退n帧协议中，因为接受窗口的尺寸为1，只能按顺序接受分组，如果有某个分组没有到达或出现误码，其之后的分组将会被全部抛弃，造成通信资源浪费。为了提高性能，
    可设法只重传出现误码的数据分组。由此可以使得接收窗口的尺寸大于1，以便接收方先收到失序到达且无误码，数据编号落在接受窗口内的那些数据分组，等到所缺失分组收齐后
    再一并上交上层。这就是选择重传协议。数据帧需要n位bit作为编号位,发送窗口大小1<WT<=2^(n-1),接受窗口大小WR取值可取1<WR<=WT
    1.协议步骤 
        i.发送方发送数据分组data0,data1...data(WT-1),在发送完毕后进入等待状态
        ii.接收方接受data0，验证成功后向发送方发送ACK0，接收方窗口后移1位。随后逐次接受分组data1，data2...data(WT-1),接受方窗口逐步后移，并向发送方方返回ACK1,ACK2...ACK(WT-1)。
        iii.发送方方接受到ACK1后便可以知道，发送窗口中位置在1的分组已经接受，发送窗口后移到1位。随后是ACK2，ACK3...直到ACK(WT-1)被接受，整个发送窗口后移WT位（此时
        ACK窗口位置与开始位置没有重合）。
    2.各种情况
        i.某个ACKN丢失
            接收方会对每个分组都回复ACK。发送方方只有接受到ACKN后才可以知道，发送窗口中位置N的分组已经接受。 因此如果某个分组丢失，不影响其他其他分组，只需要发送方重新传输
        该ACK即可。在收到缺失的分组后，接收方会把接受窗口滑倒下一个没有接受到分组的位置。（收齐）
        ii.接受方收到的分组乱序到达
            因为接收方接受窗口可按序号接受分组，因此无所谓分组的到达顺序，只需在收到分组后按照已接受分组的标记滑动接受窗口就行
        iii.发送方窗口宽度WT>2^（n-1）
            因为各种原因导致发送方重复发送接受窗口内的分组，而接受方收到重复分组时，如果发送方的窗口过大，可能会导致某分组正好落在接受窗口上，
        从而发生分组重复。设置小的发送窗口可以避免这个问题
    3.选择重传协议实现较为复杂，但在信道质量较差导致频繁重传的情况下，效率远优于停止等待协议和回退n帧协议



            